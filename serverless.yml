
service: dynamodb-api

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-west-2
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.songsTableName}

custom:
  songsTableName: songs-table-${self:provider.stage}
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
  serverless-offline:
    resourceRouted: true 

plugins:
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

functions:
  getSong:
    handler: api.getsong
    name: get-song
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: song/{songId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt SongsTable.Arn
  createSong:
    handler: api.createSong
    name: create-song
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: song
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt SongsTable.Arn      
  updateSong:
    handler: api.updateSong
    name: update-song
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: song/{songId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: 
        - !GetAtt SongsTable.Arn  
  deleteSong:
    handler: api.deleteSong
    name: delete-song
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: song/{songId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt SongsTable.Arn      
  getAllSongs:
    handler: api.getAllSongs
    name: get-all-songs
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: songs
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt SongsTable.Arn      

resources:
  Resources:
    SongsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.songsTableName}
        AttributeDefinitions:
          - AttributeName: songId
            AttributeType: S
        KeySchema:
          - AttributeName: songId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1